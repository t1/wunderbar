# inspired by https://blog.codecentric.de/en/2021/02/github-actions-pipeline/
name: Release

on:
  milestone:
    types: [ closed ]
  workflow_dispatch:
    inputs:
      skip-maven-release:
        description: Skip maven-release
        default: 'true'
        required: true

jobs:
  maven-release:
    runs-on: ubuntu-latest
    steps:
    - run: echo "Will start a Maven Central upload for milestone ${{ github.event.milestone.title }}"
      if: github.event.inputs.skip-maven-release != 'true'

    - uses: actions/checkout@v2

    - name: Set up Maven Central Repository
      if: github.event.inputs.skip-maven-release != 'true'
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - uses: actions/cache@v1
      if: github.event.inputs.skip-maven-release != 'true'
      with:
        path: ~/.m2/repository
        key: maven-${{ hashFiles('**/pom.xml') }}

    - name: Prepare release to Maven Central
      if: github.event.inputs.skip-maven-release != 'true'
      run: |
        git config user.email "snackbox@sintr.eu"
        git config user.name "GitHub-Release-Action"
        mvn --batch-mode --no-transfer-progress release:prepare

    - name: Perform release to Maven Central
      if: github.event.inputs.skip-maven-release != 'true'
      run: mvn --batch-mode --no-transfer-progress release:perform
      env:
        MAVEN_USERNAME: ${{ secrets.OSS_SONATYPE_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSS_SONATYPE_PASSWORD }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

    - name: Push updated poms
      if: github.event.inputs.skip-maven-release != 'true'
      run: git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  github-release:
    needs: [ maven-release ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/github-script@v3
      id: get-latest-tag
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        # debug: true
        script: |
          const query = `query ($owner: String!, $name: String!) {
            repository(owner: $owner, name: $name) {
             refs(refPrefix: "refs/tags/", first: 1, orderBy: {field: TAG_COMMIT_DATE, direction: DESC}) {
               edges { node { name } }
             }
            }
          }`;
          const variables = {
            owner: context.repo.owner,
            name: context.repo.repo
          }
          const result = await github.graphql(query, variables)
          const tag = result.repository.refs.edges[0].node.name
          console.log(tag)
          const x = { tag: tag, version: tag.substr(1) }
          console.log(x)
          return x

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get-latest-tag.outputs.result.tag }}
        release_name: ${{ steps.get-latest-tag.outputs.result.tag }}
        body: |
          Download it from [Maven Central](https://repo1.maven.org/maven2/com/github/t1/wunderbar.junit/${{ steps.get-latest-tag.outputs.result.version }}/wunderbar.junit-${{ steps.get-latest-tag.outputs.result.version }}.jar) or add a dependency to your `pom.xml`:

          ```xml
          <dependency>
              <groupId>com.github.t1</groupId>
              <artifactId>wunderbar</artifactId>
              <version>${{ steps.get-latest-tag.outputs.result.version }}</version>
          </dependency>
          ```

          [**Release Notes for Milestone ${{ github.event.milestone.title }}**](${{ github.event.milestone.html_url }}?closed=1)
        draft: false
        prerelease: false
