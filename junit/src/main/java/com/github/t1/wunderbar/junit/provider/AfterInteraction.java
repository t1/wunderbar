package com.github.t1.wunderbar.junit.provider;

import java.lang.annotation.Retention;

import static java.lang.annotation.RetentionPolicy.RUNTIME;

/**
 * You can use this annotation on a method to, e.g., clean up the data of a single interaction.
 * <p>
 * If there are several methods annotated as {@link AfterInteraction}, their execution order is not defined;
 * but you can use the {@link org.junit.jupiter.api.Order} annotation to specify the order explicitly.
 * <p>
 * The annotated method can optionally take parameters of these types:
 * <ul>
 * <li><code>{@link com.github.t1.wunderbar.junit.http.HttpInteraction HttpInteraction}: expected interaction</code>,
 * <li><code>{@link com.github.t1.wunderbar.junit.http.HttpRequest HttpRequest}: expected request</code>,
 * <li><code>{@link com.github.t1.wunderbar.junit.http.HttpResponse HttpResponse}: expected response</code>,
 * <li><code>{@link com.github.t1.wunderbar.junit.provider.WunderBarExecution WunderBarExecution}</code>: meta data about
 * the running interaction</li>
 * </ul>
 * <p>
 * The annotated method can optionally return an object of one of these types to change the expectations or actual response,
 * e.g. to replace an id actually generated by the database:
 * <ul>
 * <li><code>{@link com.github.t1.wunderbar.junit.http.HttpResponse HttpResponse}: expected response</code>,
 * </ul>
 *
 * @see AfterDynamicTest
 */
@Retention(RUNTIME)
public @interface AfterInteraction {}
